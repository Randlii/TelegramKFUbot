import telebot
import config
import requests
import lxml
from bs4 import BeautifulSoup
from telebot import types

bot = telebot.TeleBot(config.TOKEN)

flag1 = False
Inostranec = False
snils = ''
flag = ' '

@bot.message_handler(commands = ['start', 'help'])
def welcome(message):
    global Naprav
    global Budget
    global sp
    global silka
    global flag
    flag = ' '
    sp = []
    Naprav = Budget = silka = ' '
    markup_reply = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    bi = types.KeyboardButton("–ë–ò")
    ib = types.KeyboardButton("–ò–ë")
    ist = types.InlineKeyboardButton("–ò–°–¢")
    pi = types.KeyboardButton("–ü–ò")
    pm = types.KeyboardButton("–ü–ú")
    pmi = types.KeyboardButton("–ü–ú–ò")
    fiit = types.KeyboardButton("–§–ò–ò–¢")
    markup_reply.add(bi, ib, ist, pi, pm, pmi, fiit)    
    if flag == ' ':
        bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç, –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç! –¢—ã —É–∂–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—ë–º–µ? –î–∞–≤–∞–π-–∫–∞ –≥–ª—è–Ω–µ–º, –∫–∞–∫–æ–π —É —Ç–µ–±—è —Ä–µ–π—Ç–∏–Ω–≥!")
        msg = bot.send_message(message.chat.id, "üîπ –ë–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–ë–ò)\nüîπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–ò–ë)\nüîπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–ò–°–¢)\nüîπ –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–ü–ò)\nüîπ –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ü–ú)\nüîπ –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–ü–ú–ò)\nüîπ –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–§–ò–ò–¢)\n\n–í—ã–±–µ—Ä–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥.", parse_mode='html', reply_markup = markup_reply)
        bot.register_next_step_handler(msg, get_info)
    elif flag == '–û—à–∏–±–∫–∞':
        msg = bot.send_message(message.chat.id, "üîπ –ë–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–ë–ò)\nüîπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–ò–ë)\nüîπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–ò–°–¢)\nüîπ –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–ü–ò)\nüîπ –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ü–ú)\nüîπ –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–ü–ú–ò)\nüîπ –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–§–ò–ò–¢)\n\n–í—ã–±–µ—Ä–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥.", parse_mode='html', reply_markup = markup_reply)
        bot.register_next_step_handler(msg, get_info)    
        
def get_info(message):
    global Naprav
    global flag
    markup_reply = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    but_yes = types.KeyboardButton("–î–∞")
    but_no = types.KeyboardButton("–ù–µ—Ç")
    markup_reply.add(but_yes, but_no)    
    if message.text == "–ë–ò":
        Naprav = "–ë–ò"
        msg = bot.send_message(message.chat.id, "–¢—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§?", parse_mode='html', reply_markup = markup_reply)
        bot.register_next_step_handler(msg, inostr)        
    elif message.text == "–ò–ë":
        Naprav = "–ò–ë"
        msg = bot.send_message(message.chat.id, "–¢—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§?", parse_mode='html', reply_markup = markup_reply)
        bot.register_next_step_handler(msg, inostr)        
    elif message.text == "–ò–°–¢":
        Naprav = "–ò–°–¢"
        msg = bot.send_message(message.chat.id, "–¢—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§?", parse_mode='html', reply_markup = markup_reply)
        bot.register_next_step_handler(msg, inostr)        
    elif message.text == "–ü–ò":
        Naprav = "–ü–ò"
        msg = bot.send_message(message.chat.id, "–¢—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§?", parse_mode='html', reply_markup = markup_reply)
        bot.register_next_step_handler(msg, inostr)        
    elif message.text == "–ü–ú":
        Naprav = "–ü–ú"
        msg = bot.send_message(message.chat.id, "–¢—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§?", parse_mode='html', reply_markup = markup_reply)
        bot.register_next_step_handler(msg, inostr)        
    elif message.text == "–ü–ú–ò":
        Naprav = "–ü–ú–ò"
        msg = bot.send_message(message.chat.id, "–¢—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§?", parse_mode='html', reply_markup = markup_reply)
        bot.register_next_step_handler(msg, inostr)        
    elif message.text == "–§–ò–ò–¢":
        Naprav = "–§–ò–ò–¢"   
        msg = bot.send_message(message.chat.id, "–¢—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§?", parse_mode='html', reply_markup = markup_reply)
        bot.register_next_step_handler(msg, inostr)        
    else:
        msg = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", parse_mode='html')
        flag = '–û—à–∏–±–∫–∞'
        bot.register_next_step_handler(msg, welcome)
               
def inostr(message):
    global Inostranec
    global Naprav
    global flag
    markup_reply = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    but_bud = types.KeyboardButton("–ë—é–¥–∂–µ—Ç")
    but_vne = types.KeyboardButton("–í–Ω–µ–±—é–¥–∂–µ—Ç")
    markup_reply.add(but_bud, but_vne)    
    if message.text == "–ù–µ—Ç":
        Inostranec = True
        if Naprav == "–ò–ë":
            msg = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", parse_mode='html')
            flag = '–û—à–∏–±–∫–∞'
            bot.register_next_step_handler(msg, welcome)
        else:
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π id –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Å–Ω–∏–ª—Å", parse_mode='html')
            bot.register_next_step_handler(msg, proverka)
            
    elif message.text == "–î–∞":
        Inostranec = False
        msg = bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è —Ç—ã –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ?", parse_mode='html', reply_markup = markup_reply)    
        bot.register_next_step_handler(msg, budget)
    else: 
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ –Ω–∞–±—Ä–∞–Ω–Ω–æ!", parse_mode='html')
        flag = '–û—à–∏–±–∫–∞'
        bot.register_next_step_handler(msg, welcome)

def budget(message):
    global Budget
    global flag
    markup_inline1 = types.InlineKeyboardMarkup(row_width = 2)
    button = types.InlineKeyboardButton("–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–æ–º–µ—Ä —Å–Ω–∏–ª—Å–∞?", parse_mode='html', callback_data = "ok")
    markup_inline1.add(button)
    if message.text == "–ë—é–¥–∂–µ—Ç":
        Budget = "–ë—é–¥–∂–µ—Ç"
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–Ω–∏–ª—Å", parse_mode='html', reply_markup = markup_inline1)
        bot.register_next_step_handler(msg, proverka)
    elif message.text == "–í–Ω–µ–±—é–¥–∂–µ—Ç":
        Budget = "–í–Ω–µ–±—é–¥–∂–µ—Ç"
        msg = bot.send_message(message.chat.id,"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–Ω–∏–ª—Å", parse_mode='html', reply_markup = markup_inline1)
        bot.register_next_step_handler(msg, proverka)
    else: 
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ –Ω–∞–±—Ä–∞–Ω–Ω–æ! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª", parse_mode='html')
        flag = '–û—à–∏–±–∫–∞'
        bot.register_next_step_handler(msg, welcome)        
                
def proverka(message):
    global Inostranec
    global Naprav
    global Budget
    global sp
    global silka
    global snils
    global flag
    if flag == '—Ä–µ–ø–∏—Ç':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–Ω–∏–ª—Å –µ—â—ë —Ä–∞–∑", parse_mode='html')
    snils = message.text
    if Inostranec == True:
        if Naprav == "–ë–ò":
            silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=1558&p_inst=0&p_category=2'         
        elif Naprav == "–ò–°–¢":
            silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=1556&p_inst=0&p_category=2'
        elif Naprav == "–ü–ò":
            silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=1557&p_inst=0&p_category=2'
        elif Naprav == "–ü–ú":
            silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=1790&p_inst=0&p_category=2'
        elif Naprav == "–ü–ú–ò":
            silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=1553&p_inst=0&p_category=2'                
        elif Naprav == "–§–ò–ò–¢":
            silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=1554&p_inst=0&p_category=2'
        else: 
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", parse_mode='html')           
    else:
        if Budget == "–ë—é–¥–∂–µ—Ç":
            if Naprav == "–ë–ò":
                silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_faculty=9&p_speciality=203&p_inst=0&p_typeofstudy=1'         
            elif Naprav == "–ò–ë":
                silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_faculty=9&p_speciality=369&p_inst=0&p_typeofstudy=1'       
            elif Naprav == "–ò–°–¢":
                silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_faculty=9&p_speciality=370&p_inst=0&p_typeofstudy=1'
            elif Naprav == "–ü–ò":
                silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_faculty=9&p_speciality=1084&p_inst=0&p_typeofstudy=1'
            elif Naprav == "–ü–ú":
                silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_faculty=9&p_speciality=559&p_inst=0&p_typeofstudy=1'
            elif Naprav == "–ü–ú–ò":
                silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_faculty=9&p_speciality=166&p_inst=0&p_typeofstudy=1'                
            elif Naprav == "–§–ò–ò–¢":
                silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_faculty=9&p_speciality=167&p_inst=0&p_typeofstudy=1'
            else: 
                bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª",  parse_mode='html')                 
        elif Budget == "–í–Ω–µ–±—é–¥–∂–µ—Ç":
                if Naprav == "–ë–ò":
                    silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=203&p_inst=0&p_category=2'         
                elif Naprav == "–ò–ë":
                    silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=369&p_inst=0&p_category=2'       
                elif Naprav == "–ò–°–¢":
                    silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=370&p_inst=0&p_category=2'
                elif Naprav == "–ü–ò":
                    silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=1084&p_inst=0&p_category=2'
                elif Naprav == "–ü–ú":
                    silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=559&p_inst=0&p_category=2'
                elif Naprav == "–ü–ú–ò":
                    silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=166&p_inst=0&p_category=2'                
                elif Naprav == "–§–ò–ò–¢":
                    silka = 'https://abiturient.kpfu.ru/entrant/abit_entrant_originals_list?p_open=&p_typeofstudy=1&p_faculty=9&p_speciality=167&p_inst=0&p_category=2'
                else: 
                    msg = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª", parse_mode='html')
                    flag = '–û—à–∏–±–∫–∞'
                    bot.register_next_step_handler(msg, welcome)
                    
                    
    sp = parser(silka)
    print(sp)
    for i in range(0, len(sp)):
        if sp[i] == snils:
            bot.send_message(message.chat.id, "–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: " + str(sp[i-1]) + "\n" + "–í—Å–µ–≥–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è: " + str(sp[-2]), parse_mode='html')  
            markup_inline2 = types.InlineKeyboardMarkup(row_width = 2)
            button1 = types.InlineKeyboardButton("–î–∞", parse_mode='html', callback_data = "reg")
            button2 = types.InlineKeyboardButton("–ù–µ—Ç", parse_mode='html', callback_data = "nereg")
            markup_inline2.add(button1, button2)    
            bot.send_message(message.chat.id, "–ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ?", parse_mode='html', reply_markup = markup_inline2)            
            break
    else: 
        msg = bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å–Ω–∏–ª—Å –∏–ª–∏ ID. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑", parse_mode='html')
        bot.register_next_step_handler(msg, proverka)
        
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global flag
    try:
        if call.message:
            if call.data == 'ok':
                bot.send_photo(call.message.chat.id, 'https://upload.wikimedia.org/wikipedia/commons/c/cd/–°–ù–ò–õ–°.jpg')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–Ω–∏–ª—Å", reply_markup=None)
            elif call.data == 'reg':
                flag = '—Ñ–∏–Ω–∞–ª'
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ?", reply_markup=None)
                msg = bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª", parse_mode='html')
                bot.register_next_step_handler(msg, final)
            elif call.data == 'nereg':
                bot.send_message(call.message.chat.id, "–í–∞c –ø–æ–Ω—è–ª! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ /help", parse_mode='html')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ?", reply_markup=None)
    except Exception as e:
        print(repr(e))
def final(message):   
    global sp
    global silka
    global flag
    if flag == '—Ñ–∏–Ω–∞–ª':
        markup_reply45 = types.ReplyKeyboardMarkup(resize_keyboard = True)
        rezultat = types.KeyboardButton("–£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥!")
        markup_reply45.add(rezultat)
        msg = bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", parse_mode='html', reply_markup = markup_reply45)
        bot.register_next_step_handler(msg, sad)
    
def sad(message):
    if message.text == "–£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥!":
        sp = parser(silka)
        print(sp)
        for i in range(0, len(sp)):
            if sp[i] == snils:
                msg = bot.send_message(message.chat.id, "–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: " + str(sp[i-1]) + "\n" + "–í—Å–µ–≥–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è: " + str(sp[-2]), parse_mode='html')
                bot.register_next_step_handler(msg, sad)
    else:
        msg =bot.send_message(message.chat.id, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ /help", parse_mode='html')
        bot.register_next_step_handler(msg, welcome)
def parser(silka):
    url = silka
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'lxml')
    quotes = soup.find()
    spisok = soup.get_text()
    spisok = spisok.split('\n')
    b = []
    for i in spisok:
        if i == '' or i == '\xa0' or i == '0' or i == '–í–ù–£, –í–ù–£' or i == '—É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω–∫—É—Ä—Å–µ' or i == '–Ω–µ—Ç' or i == '–¥–∞' or i == '–ï–ì–≠, –ï–ì–≠' or i == '–ï–ì–≠, –ï–ì–≠, –ï–ì–≠' or i == '–∑–∞—á–∏—Å–ª–µ–Ω' or i == '–Ω–µ —Å–¥–∞–Ω—ã –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è)' or i == '–í–ù–£, –í–ù–£, –í–ù–£':
            pass
        else: b.append(i)
    for ind in range(0, len(b)):
        if b[ind] == "1":
            w = ind     
    spisok = []
    for i in range(w, len(b)):
        spisok.append(b[i])
    while len(spisok[-1]) == 1 or len(spisok[-1]) == 2 or len(spisok[-1]) == 3:
        spisok.pop(-1)
    return spisok
    
bot.enable_save_next_step_handlers(delay=2)
bot.load_next_step_handlers()
bot.polling()